# Stage 1: Build the JAR file
FROM openjdk:17-jdk-alpine as builder

# Set the working directory inside the builder container
WORKDIR /app

# Copy the project files into the builder container
COPY . .

# Build the project to create the JAR file
RUN ./mvnw.cmd clean package

# Stage 2: Create the final image
FROM openjdk:17-jdk-alpine

# Set the working directory inside the container
WORKDIR /app

# Copy the JAR file from the builder stage
COPY --from=builder /app/target/database-connector-0.0.1-SNAPSHOT.jar /app/app.jar

# Expose port 8080
EXPOSE 8080

# Command to run your Spring Boot application when the container starts
ENTRYPOINT ["java", "-jar", "/app/app.jar"]

# # Use the official Maven image to create a build artifact.
# # This is a multi-stage build to reduce the final image size.
# FROM maven:3.8.4-openjdk-17 AS build
# WORKDIR /app
#
# # Copy the pom.xml and download dependencies
# COPY pom.xml .
# RUN mvn dependency:go-offline -B
#
# # Copy the source code and build the application
# COPY src ./src
# RUN mvn clean package -DskipTests
#
# # Use the official OpenJDK image to run the application
# FROM openjdk:17-jdk-slim
# WORKDIR /app
#
# # Copy the jar file from the build stage
# COPY --from=build /app/target/*.jar app.jar
#
# # Expose the port the app runs on
# EXPOSE 8080
#
# # Set the entrypoint to run the jar
# ENTRYPOINT ["java", "-jar", "app.jar"]
